library(limma)
library(tidyverse)
library(plyr)
library(parallel)
library(dynutils)
library(data.table)
setDTthreads(threads=0)
numCores <- detectCores() -1

# Set k as length of k-mer you are generating matrix for
k <- 1

setwd('/Users/juju7007thorn/OneDrive - University Of Cambridge/Y3 PATH/Project/Understanding_Matrices_formation')

# Read in counts of each unique CDR3 in each patient
DT <- fread('/Users/juju7007thorn/OneDrive - University Of Cambridge/Y3 PATH/Project/Immunity_CDR3s/Immunity_TRB_downsampled_CDR3_counts_top_17_HD_samples 3.csv')
colnames(DT)[1] <- 'kmer'
head(DT)


#Normalise by dividing the count of that unique CDR3 by the total number of productive CDR3 counts fo rtha tsubject, creating a CDR3 count matrix
freq_fun <- function(x){x/sum(x)}
cols <- colnames(DT)[-1]
DT[,(cols) := lapply(.SD, FUN= freq_fun), .SDcols = cols]
fwrite(DT, 'Normalised_CDR3_Data_Immunity_Paper.csv')

# Split CDR3 into k-mers and obtain counts
split_cdr3_into_non_positional_kmers <- function(r){
  
  #Vector of CDR3 counts in each sample
  cdr3_count <- unlist(r[-1]) %>% as.numeric()
  
  #CDR3 sequence to split into kmers
  cdr3 <- r[1]
  
  #No of kmers for given CDR3
  no_of_kmers <- nchar(cdr3)+1-k
  
  #List of kmers
  kmer_list <- substr(rep(cdr3, no_of_kmers), 1:no_of_kmers, k:nchar(cdr3))
  
  #Matrix of kmers and counts
  kmer.mtx <- matrix(data = cdr3_count, nrow = no_of_kmers, ncol = length(cdr3_count), byrow = T)
  rownames(kmer.mtx) <- kmer_list
  
  #Convert to data.table and set column names
  kmer.mtx <- as.data.table(kmer.mtx, keep.rownames=T)
  colnames(kmer.mtx) <- c('kmer', sample_names)
  
  kmer.mtx
}


#Vector of sample names
sample_names <- colnames(DT[,-1,])

NP_label <- paste0('Non-positional_', k, 'mer')

#Remove CDR3 sequences shorter than kmer lenth
DT <- DT[nchar(kmer)>=k,,]

#transpose so can do function on columns
DT <- data.table::transpose(DT)
head(DT)

###Generate non-positional kmer matrices

#For each CDR3, identify kmers and counts
NP_DT <- DT[,list(mclapply(.SD, FUN = split_cdr3_into_non_positional_kmers, mc.cores = numCores)),]
head(NP_DT)

#Merge, sum, sort and write
NP_DT <- NP_DT$V1 %>% bind_rows(.)
NP_DT[is.na(NP_DT)] <- 0
NP_DT <- NP_DT[,lapply(.SD, FUN = sum), by = kmer]
NP_DT <- NP_DT[order(kmer),,]

fwrite(NP_DT, paste0(NP_label, '.csv'))


